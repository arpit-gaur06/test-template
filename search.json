[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "PyVista Overview",
    "section": "",
    "text": "Getting Started\n\n\n\n\n\nInstallation, Setup and Examples\n\n\n\n\n\nFeb 24, 2025\n\n\nArpit Gaur, Prince A Patel, Monika Nagliya\n\n\n\n\n\n\n\n\n\n\n\n\nKey Features\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 22, 2025\n\n\nArpit Gaur, Prince A Patel, Monika Nagliya\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisations and Examples\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nArpit Gaur, Prince A Patel, Monika Nagliya\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "3D plotting and mesh analysis through a streamlined interface for the Visualization Toolkit (VTK)\n\n\nPyVista is an open-source Python library that provides tools for 3D visualization and analysis of scientific and engineering data. It is built on top of VTK (Visualization Toolkit) and offers an easy-to-use, Pythonic API for creating and interacting with 3D models, meshes, and volumetric data.\n\nPythonic VTK: a high-level API to the Visualization Toolkit (VTK)\nmesh data structures and filtering methods for spatial datasets\n3D plotting made simple and built for large/complex data geometries\n\nPyVista is a helper library for the Visualization Toolkit (VTK) that takes a different approach on interfacing with VTK through NumPy and direct array access. This package provides a Pythonic, well-documented interface exposing VTK’s powerful visualization backend to facilitate rapid prototyping, analysis, and visual integration of spatially referenced datasets.\nThis module can be used for scientific plotting for presentations and research papers as well as a supporting module for other mesh dependent Python modules."
  },
  {
    "objectID": "posts/installation.html",
    "href": "posts/installation.html",
    "title": "Getting Started",
    "section": "",
    "text": "Installation\n1. Install Pyvista\nThe only prerequisite for installing PyVista is Python itself. We can use Anaconda or Pip as virtual environment and package manager for Python.\nPyVista can be installed by conda-forge:\nconda install -c conda-forge pyvista\nor can be installed via pip by the following command:\npip install pyvista\nThis will automatically install PyVista along with all the necessary dependencies.\n2. Optional: Install vtk for 3D Visualization\nPyVista builds on VTK, so if you’re running into issues with installation or if you want to manually install VTK, you can install it separately:\npip install vtk\n3. Verify the Installation\nOnce installed, you can verify if everything is set up correctly by opening a Python environment (either a Python shell or a Jupyter notebook) and typing:\nimport pyvista as pv\nprint(pv.__version__)\n4. Optional: Install trame for 3D Visualization\nWe will be going to install trame library which is an optional dependency for interactive notebook rendering.\npip install trame-vuetify trame-vtk\nThis will open an interactive 3D plot. You can rotate, zoom, and inspect the mesh.\nWith that, we’re ready to use PyVista!"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisations and Examples",
    "section": "",
    "text": "After the installation, we can start using PyVista for 3D visualization. Here area some simple example to plot and analyse 3D mesh:\n\nimport pyvista as pv\n\n# Create a simple mesh (sphere)\nsphere = pv.Sphere()\n\n# Plot the mesh\nsphere.plot()\n\n\n\n\n\nfrom pyvista import examples\n\n\nmesh = examples.load_random_hills() # automatically download\ncontours = mesh.contour()\ncontours\n\n\n\n\n\n\n\n\nHeader\nData Arrays\n\n\n\n\n\nPolyData\nInformation\n\n\nN Cells\n3709\n\n\nN Points\n3731\n\n\nN Strips\n0\n\n\nX Bounds\n-1.000e+01, 1.000e+01\n\n\nY Bounds\n-2.309e-14, 2.000e+01\n\n\nZ Bounds\n9.573e-01, 7.483e+00\n\n\nN Arrays\n2\n\n\n\n\n\n\nName\nField\nType\nN Comp\nMin\nMax\n\n\nNormals\nPoints\nfloat32\n3\n-8.643e-01\n9.992e-01\n\n\nElevation\nPoints\nfloat32\n1\n9.573e-01\n7.483e+00\n\n\n\n\n\n\n\n\n\nmesh.plot()"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Key Features",
    "section": "",
    "text": "Key Features of PyVista\n\n3D Visualization\n\nExplanation: PyVista simplifies the rendering of 3D objects such as meshes, point clouds, structured grids, and volumetric data. It provides an intuitive interface for visualizing geometric and scientific datasets.\nExample: Displaying a 3D sphere.\nimport pyvista as pv\nsphere = pv.Sphere()\nsphere.plot(color=\"cyan\", show_edges=True)\n\n3D Visualization: Easily create and render 3D objects such as point clouds, surfaces, volumes, and structured/unstructured grids.\nMesh Analysis and Processing: Provides tools for manipulating and analyzing 3D meshes (e.g., smoothing, clipping, slicing, and contouring).\nIntegration with NumPy & SciPy: Supports NumPy arrays for efficient computation and SciPy for spatial analysis.\nInteractive Plots: Enables interactive 3D visualization using a simple and intuitive API.\nExport & Import: Supports a variety of file formats (e.g., STL, OBJ, VTK, PLY).\nParallel Processing: Can leverage multi-threading for improved performance.\nSeamless Jupyter Notebook Support: Works well with Jupyter notebooks for in-line visualization."
  }
]