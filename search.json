[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "The Ultimate 3-D Visualization Python Library",
    "section": "",
    "text": "Use Cases\n\n\n\n\n\nUse cases and practical applications\n\n\n\n\n\nFeb 22, 2025\n\n\nArpit Gaur, Prince A Patel, Monika Nagliya\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisations and Examples\n\n\n\n\n\n\nVISUALIZATION\n\n\n\nExamples and Explanations\n\n\n\n\n\nFeb 22, 2025\n\n\nArpit Gaur, Prince A Patel, Monika Nagliya\n\n\n\n\n\n\n\n\n\n\n\n\nKey Features\n\n\n\n\n\nUseful Attributes and Features\n\n\n\n\n\nFeb 22, 2025\n\n\nArpit Gaur, Prince A Patel, Monika Nagliya\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Started\n\n\n\n\n\nInstallation, Setup and Examples\n\n\n\n\n\nFeb 24, 2025\n\n\nArpit Gaur, Prince A Patel, Monika Nagliya\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "3D plotting and mesh analysis through a streamlined interface for the Visualization Toolkit (VTK)\n\n\nPyVista is an open-source Python library that provides tools for 3D visualization and analysis of scientific and engineering data. It is built on top of VTK (Visualization Toolkit) and offers an easy-to-use, Pythonic API for creating and interacting with 3D models, meshes, and volumetric data.\n\nPythonic VTK: a high-level API to the Visualization Toolkit (VTK)\nmesh data structures and filtering methods for spatial datasets\n3D plotting made simple and built for large/complex data geometries\n\nPyVista is a helper library for the Visualization Toolkit (VTK) that takes a different approach on interfacing with VTK through NumPy and direct array access. This package provides a Pythonic, well-documented interface exposing VTK’s powerful visualization backend to facilitate rapid prototyping, analysis, and visual integration of spatially referenced datasets.\nThis module can be used for scientific plotting for presentations and research papers as well as a supporting module for other mesh dependent Python modules."
  },
  {
    "objectID": "posts/installation.html",
    "href": "posts/installation.html",
    "title": "Getting Started",
    "section": "",
    "text": "Installation\n1. Install Pyvista:\nThe only prerequisite for installing PyVista is Python itself. We can use Anaconda or Pip as virtual environment and package manager for Python.\nPyVista can be installed by conda-forge:\nconda install -c conda-forge pyvista\nor can be installed via pip by the following command:\npip install pyvista\nThis will automatically install PyVista along with all the necessary dependencies.\n2. Install vtk for 3D Visualization:\nPyVista builds on VTK, so if you’re running into issues with installation or if you want to manually install VTK, you can install it separately:\npip install vtk\n3. Verify the Installation:\nOnce installed, you can verify if everything is set up correctly by opening a Python environment (either a Python shell or a Jupyter notebook) and typing:\nimport pyvista as pv\nprint(pv.__version__)\n4. Optional: Install trame for 3D Visualization:\nWe will be going to install trame library which is an optional dependency for interactive notebook rendering.\npip install trame-vuetify trame-vtk\nThis will open an interactive 3D plot. You can rotate, zoom, and inspect the mesh.\nWith that, we’re ready to use PyVista!"
  },
  {
    "objectID": "posts/uses.html",
    "href": "posts/uses.html",
    "title": "Use Cases",
    "section": "",
    "text": "PyVista is widely used across various fields due to its powerful 3D visualization and mesh analysis capabilities. Below are some key use cases and practical applications:\n1. Scientific and Engineering Visualization - Use Case: Visualizing simulation results in engineering and physics - Application: Computational Fluid Dynamics (CFD), Finite Element Analysis (FEA), and heat transfer simulations.\nExample: Visualizing fluid flow simulation results.\n2. Medical Imaging and Volume Rendering - Use Case: Visualizing and analyzing medical scans (CT, MRI) - Application: 3D rendering of human anatomy for medical diagnosis and surgery planning. PyVista allows volumetric rendering of medical datasets, such as CT and MRI scans, to better understand anatomical structures.\nExample: Displaying a 3D medical scan.\n3. Geospatial and Geological Data Visualization - Use Case: 3D visualization of terrain and geological models - Application: Mapping underground formations for mining, oil exploration, and earthquake studies. Geoscientists use PyVista to visualize seismic data, elevation maps, and subsurface structures.\nExample: Displaying geological strata.\n4. Education and Research - Use Case: Teaching 3D modeling and visualization concepts - Application: Interactive visualization for students in STEM fields. PyVista is used in universities to teach 3D data visualization, scientific computing, and simulation techniques.\nExample: Creating an interactive 3D model for students.\n5. Game Development and Computer Graphics - Use Case: Mesh manipulation and rendering for game assets - Application: Generating and modifying 3D assets for game development. Developers can use PyVista to preprocess and analyze 3D models before integrating them into game engines like Unity or Unreal Engine.\nExample: Decimating (reducing complexity) of a 3D model."
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisations and Examples",
    "section": "",
    "text": "After the installation, we can start using PyVista for 3D visualization. Here area some simple example to plot and analyse 3D mesh:\n\nimport pyvista as pv\n\n# Create a simple mesh (sphere)\nsphere = pv.Sphere()\n\n# Plot the mesh\nsphere.plot()\n\n\n\n\n\nfrom pyvista import examples\n\n\nmesh = examples.load_random_hills() # automatically download\ncontours = mesh.contour()\ncontours\n\n\n\n\n\n\n\n\nHeader\nData Arrays\n\n\n\n\n\nPolyData\nInformation\n\n\nN Cells\n3709\n\n\nN Points\n3731\n\n\nN Strips\n0\n\n\nX Bounds\n-1.000e+01, 1.000e+01\n\n\nY Bounds\n-2.309e-14, 2.000e+01\n\n\nZ Bounds\n9.573e-01, 7.483e+00\n\n\nN Arrays\n2\n\n\n\n\n\n\nName\nField\nType\nN Comp\nMin\nMax\n\n\nNormals\nPoints\nfloat32\n3\n-8.643e-01\n9.992e-01\n\n\nElevation\nPoints\nfloat32\n1\n9.573e-01\n7.483e+00\n\n\n\n\n\n\n\n\n\nmesh.plot()\n\n\n\n\n\nimport numpy as np\n\nimport pyvista as pv\n\ngrid = pv.ImageData(dimensions=(200, 200, 200))\ngrid['scalars'] = np.linalg.norm(grid.center - grid.points, axis=1)\ngrid\n\n\n\n\n\n\n\n\nHeader\nData Arrays\n\n\n\n\n\nImageData\nInformation\n\n\nN Cells\n7880599\n\n\nN Points\n8000000\n\n\nX Bounds\n0.000e+00, 1.990e+02\n\n\nY Bounds\n0.000e+00, 1.990e+02\n\n\nZ Bounds\n0.000e+00, 1.990e+02\n\n\nDimensions\n200, 200, 200\n\n\nSpacing\n1.000e+00, 1.000e+00, 1.000e+00\n\n\nN Arrays\n1\n\n\n\n\n\n\nName\nField\nType\nN Comp\nMin\nMax\n\n\nscalars\nPoints\nfloat64\n1\n8.660e-01\n1.723e+02\n\n\n\n\n\n\n\n\n\nopacity = np.zeros(100)\nopacity[::10] = np.geomspace(0.01, 0.75, 10)\n\n\npl = pv.Plotter()\npl.add_volume_clip_plane(grid, normal='-x', opacity=opacity[::-1], cmap='magma')\npl.show()\n\n\n\n\n\nimport numpy as np\nimport pyvista\n\nrng = np.random.default_rng(seed=0)\npoint_cloud = rng.random((100, 3))\npdata = pyvista.PolyData(point_cloud)\npdata['orig_sphere'] = np.arange(100)\n\n# create many spheres from the point cloud\nsphere = pyvista.Sphere(radius=0.02, phi_resolution=10, theta_resolution=10)\npc = pdata.glyph(scale=False, geom=sphere, orient=False)\npc.plot(cmap='Reds')\n\n\n\n\n\nfrom pyvista import examples\nmesh = examples.download_dragon()\nmesh['scalars'] = mesh.points[:, 1]\nmesh.plot(cpos='xy', cmap='plasma')"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Key Features",
    "section": "",
    "text": "Key Features of PyVista\n1. 3D Visualization:\n\nPyVista simplifies the rendering of 3D objects such as meshes, point clouds, structured grids, and volumetric data. It provides an intuitive interface for visualizing geometric and scientific datasets.\n\nExample: Displaying a 3D sphere.\n2. Mesh Analysis and Processing:\n\nPyVista includes tools for working with and analyzing 3D meshes. It supports operations such as slicing, clipping, smoothing, decimating, and extracting surface features.\n\nExample: Slicing a 3D model.\n3. Integration with NumPy & SciPy:\n\nPyVista supports NumPy arrays for efficient numerical computation. You can directly manipulate mesh data using NumPy operations.\n\nExample: Accessing and modifying point coordinates.\n4. Interactive Plots:\n\nPyVista supports interactive 3D visualization, allowing users to zoom, rotate, and pan within the rendered scene.\n\nExample: Creating an interactive plot.\n5. Export & Import of Meshes:\n\nPyVista supports various 3D file formats, such as VTK, STL, PLY, OBJ, and more.\n\nExample: Saving and loading a mesh.\n6. Parallel Processing for Performance:\n\nPyVista can utilize multi-threading and parallel processing to handle large datasets efficiently.\n\nExample: Using parallel computing in PyVista (enabled internally when processing large data).\n7. Jupyter Notebook Support:\n\nPyVista works seamlessly with Jupyter Notebooks, allowing inline visualization of 3D models.\n\nExample: Running PyVista in a Jupyter Notebook.\n8. Customizable Rendering & Advanced Visualization:\n\nPyVista supports various rendering options like lighting, shading, colormaps, and transparency for detailed visual analysis.\n\nExample: Applying shading and transparency.\n9. Volume Rendering:\n\nPyVista can render volumetric data, such as medical imaging (CT scans, MRI).\n\nExample: Volume rendering.\n10. Geospatial & Scientific Data Visualization:\n\nPyVista supports structured and unstructured grid datasets, making it useful for engineering simulations, geology, fluid dynamics, and medical imaging.\n\nExample: Visualizing structured grid data."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "",
    "section": "",
    "text": "PyVista is a powerful and user-friendly library for 3D visualization and mesh analysis. It simplifies working with scientific and engineering datasets by providing an intuitive API while leveraging VTK’s powerful capabilities. PyVista is a versatile tool for 3D visualization and data analysis across multiple domains, including engineering, medicine, robotics, game development, structural analysis, AI, and environmental science. Its ease of use and integration with NumPy and VTK make it an essential tool for professionals and researchers.\nHere are some reputable sources and further readings on PyVista: Official Documentation & Tutorials\n\nPyVista Documentation – The official documentation with API references, tutorials, and examples. 🔗 https://docs.pyvista.org/\nPyVista GitHub Repository – Source code, issues, and community contributions. 🔗 https://github.com/pyvista/pyvista\nVTK: The Visualization Toolkit – PyVista is built on top of VTK, which is a well-documented and widely used library for scientific visualization. 🔗 https://vtk.org/"
  }
]